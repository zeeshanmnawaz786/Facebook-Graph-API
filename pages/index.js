import Head from "next/head";

import { useEffect, useMemo, useState } from "react";

import styles from "../styles/Home.module.css";

export default function Home() {
  const [user, setUser] = useState({ name: "", id: "" });

  const [uiLogin, setLogin] = useState(true);

  const [accessToken, setAccessToken] = useState();

  const [pageId, setPageId] = useState();

  const [pageAccessToken, setPageAccessToken] = useState();

  const [grantedScopes, setGrantedScopes] = useState();

  const [postText, setPostText] = useState();

  console.log("pageId", pageId);

  console.log("pageAccessToken", pageAccessToken);

  useEffect(() => {
    const app_id = "564976968379492";

    console.log("app_id", app_id);

    window.fbAsyncInit = function () {
      window.FB.init({
        appId: app_id,

        autoLogAppEvents: true,

        xfbml: true,

        version: "v15.0",
      });

      window.FB.getLoginStatus(function (response) {
        if (response.status === "connected") {
          setAccessToken(response.authResponse.accessToken);

          setGrantedScopes(response.authResponse.grantedScopes);

          FB.api(
            `/me/accounts?access_token=${response.authResponse.accessToken}`,

            function (response) {
              if (response && !response.error) {
                setPageAccessToken(response?.data?.[0].access_token);

                setPageId(response?.data?.[0].id);
              }
            }
          );

          FB.api("/me", function (response) {
            setUser(response);
          });

          setLogin(false);
        } else if (response.status === "not_authorized") {
          // The user hasn't authorized your application.  They

          // must click the Login button, or you must call FB.login

          // in response to a user gesture, to launch a login dialog.

          setLogin(true);
        } else {
          // The user isn't logged in to Facebook. You can launch a

          // login dialog with a user gesture, but the user may have

          // to log in to Facebook before authorizing your application.

          setLogin(true);
        }
      });
    };
  }, []);

  const login = () => {
    try {
      FB.login(
        function (response) {
          if (response.authResponse) {
            setAccessToken(response.authResponse.accessToken);

            setGrantedScopes(response.authResponse.grantedScopes);

            FB.api(
              `/me/accounts?access_token=${response.authResponse.accessToken}`,

              function (response) {
                if (response && !response.error) {
                  setPageAccessToken(response?.data?.[0].access_token);

                  setPageId(response?.data?.[0].id);
                }
              }
            );

            FB.api("/me", function (response) {
              setUser(response);
            });

            setLogin(false);
          } else {
            console.log("User cancelled login or did not fully authorize.");
          }
        },

        {
          scope: "public_profile,pages_read_engagement,pages_manage_posts",

          return_scopes: true,
        }
      );
    } catch (err) {
      console.log(err.message);
    }
  };
  const post = () => {
    FB.api(
      `/${pageId}/feed?message=${postText}&access_token=${pageAccessToken}`,

      "POST",

      function (response) {
        console.log(response.error?.message);

        if (response && !response.error) {
          console.log(response);
        }
      }
    );
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>

        <meta name="description" content="Generated by create next app" />

        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {!uiLogin && (
          <>
            <h1 className={styles.title}>
              {user.name}

              <br />

              {user.id}
            </h1>

            <p>{grantedScopes}</p>

            <br />

            <br />

            <br />

            <textarea
              style={{ width: "500px", fontSize: "18px", padding: "10px" }}
              value={postText}
              onChange={(e) => setPostText(e.target.value)}
              placeholder="Message..."
              rows="8"
            />

            <button
              onClick={post}
              style={{ padding: "12px 50px 12px 50px", marginTop: "20px" }}
            >
              post
            </button>
          </>
        )}

        {uiLogin && (
          <button
            onClick={login}
            style={{ padding: "12px 50px 12px 50px", marginTop: "20px" }}
          >
            login
          </button>
        )}
      </main>

      <footer className={styles.footer}>Powered by FaceBook API</footer>
    </div>
  );
}
